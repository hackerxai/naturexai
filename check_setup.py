#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import sys
from dotenv import load_dotenv

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –¥–ª—è Windows (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏)
def safe_print(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—á–∞—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode –¥–ª—è Windows"""
    try:
        print(text)
    except UnicodeEncodeError:
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ ASCII —Å–∏–º–≤–æ–ª—ã –¥–ª—è Windows
        replacements = {
            'üå±': '[*]',
            'üîç': '[?]',
            '‚úÖ': '[+]',
            '‚ùå': '[X]',
            'üì¶': '[PKG]',
            'üåç': '[ENV]',
            '‚öôÔ∏è': '[CFG]', 
            'üéâ': '[OK]',
            'üöÄ': '>>',
            'üîß': '[FIX]'
        }
        for emoji, replacement in replacements.items():
            text = text.replace(emoji, replacement)
        print(text)

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'main.py',
        'utils.py', 
        'config.py',
        'handlers.py',
        'keyboards.py',
        'requirements.txt',
        '.env'
    ]
    
    safe_print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    all_found = True
    
    for file in required_files:
        if os.path.exists(file):
            safe_print(f"‚úÖ {file}")
        else:
            safe_print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù!")
            all_found = False
    
    return all_found

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    safe_print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    all_installed = True
    
    try:
        import telegram
        safe_print(f"‚úÖ python-telegram-bot {telegram.__version__}")
    except ImportError:
        safe_print("‚ùå python-telegram-bot - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        all_installed = False
    
    try:
        import requests
        safe_print(f"‚úÖ requests {requests.__version__}")
    except ImportError:
        safe_print("‚ùå requests - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        all_installed = False
    
    try:
        import dotenv
        safe_print("‚úÖ python-dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        safe_print("‚ùå python-dotenv - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        all_installed = False
    
    try:
        import PIL
        safe_print("‚úÖ Pillow —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        safe_print("‚ùå Pillow - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        all_installed = False
    
    try:
        import aiohttp
        safe_print(f"‚úÖ aiohttp {aiohttp.__version__}")
    except ImportError:
        safe_print("‚ùå aiohttp - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        all_installed = False
    
    return all_installed

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    safe_print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    load_dotenv()
    env_ok = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
    bot_token = os.getenv('BOT_TOKEN')
    if bot_token and bot_token != 'your_bot_token_here':
        safe_print("‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        safe_print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        env_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_ID
    admin_id = os.getenv('ADMIN_ID')
    if admin_id and admin_id != '0':
        safe_print("‚úÖ ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        safe_print("‚ùå ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        env_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OPENROUTER_API_KEY
    api_key = os.getenv('OPENROUTER_API_KEY')
    if api_key and api_key != 'your_openrouter_api_key':
        safe_print("‚úÖ OPENROUTER_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        safe_print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        env_ok = False
    
    return env_ok

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å config.py"""
    safe_print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        safe_print("‚úÖ config.py –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        
        if hasattr(config, 'BOT_TOKEN'):
            safe_print("‚úÖ BOT_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        if hasattr(config, 'OPENROUTER_API_KEY'):
            safe_print("‚úÖ OPENROUTER_API_KEY –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        if hasattr(config, 'VISION_MODEL'):
            safe_print(f"‚úÖ –ú–æ–¥–µ–ª—å: {config.VISION_MODEL}")
        if hasattr(config, 'EMOJIS'):
            safe_print(f"‚úÖ –≠–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {len(config.EMOJIS)} —à—Ç.")
        
        return True
    except Exception as e:
        safe_print(f"‚ùå –û—à–∏–±–∫–∞ –≤ config.py: {e}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    safe_print("üå± –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π")
    safe_print("=" * 50)
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_files():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not check_config():
        all_checks_passed = False
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    safe_print("\n" + "=" * 50)
    if all_checks_passed:
        safe_print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        safe_print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        safe_print("python run.py")
        return True
    else:
        safe_print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        safe_print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        safe_print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        safe_print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        safe_print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python check_setup.py' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        safe_print("\n‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        safe_print(f"\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        safe_print(f"\n–û—à–∏–±–∫–∏: {e}")
        safe_print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        safe_print(f"  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        safe_print(f"  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        safe_print(f"  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python check_setup.py' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sys.exit(1)