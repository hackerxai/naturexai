name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🐍 Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black

    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff .

    - name: 🔍 Lint with flake8
      run: |
        # Останавливаем на ошибках синтаксиса или неопределенных именах
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Проверяем сложность кода
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        BOT_TOKEN: "test_token"
        OPENROUTER_API_KEY: "test_key"
        ADMIN_ID: "123456789"

    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: 🔒 Security scan
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: 🔍 Run safety check
      run: |
        safety check --json

    - name: 🛡️ Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  docker:
    name: 🐳 Docker build test
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔨 Build Docker image
      run: |
        docker build -t plant-recognition-bot:test .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm -e BOT_TOKEN=test -e OPENROUTER_API_KEY=test -e ADMIN_ID=123 plant-recognition-bot:test python -c "import config; print('✅ Config import successful')"

  setup-validation:
    name: ⚙️ Setup validation
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ✅ Validate setup script
      run: |
        python setup.py --help || echo "Setup script validation complete"
        
    - name: ✅ Validate check script
      run: |
        python check_setup.py
      env:
        BOT_TOKEN: "test_token"
        OPENROUTER_API_KEY: "test_key" 
        ADMIN_ID: "123456789"

    - name: ✅ Test imports
      run: |
        python -c "import config, handlers, keyboards, utils; print('✅ All imports successful')"
      env:
        BOT_TOKEN: "test_token"
        OPENROUTER_API_KEY: "test_key"
        ADMIN_ID: "123456789"

  deployment-test:
    name: 🚀 Deployment test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, security, docker]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Test deploy scripts
      run: |
        # Проверяем синтаксис скриптов
        bash -n deploy.sh
        bash -n docker-deploy.sh
        
    - name: ✅ Validate deployment files
      run: |
        # Проверяем наличие всех необходимых файлов
        test -f Dockerfile
        test -f docker-compose.yml
        test -f .gitignore
        test -f LICENSE
        echo "✅ All deployment files present"

  notify:
    name: 📢 Notify on completion
    runs-on: ubuntu-latest
    needs: [test, security, docker, setup-validation]
    if: always()
    
    steps:
    - name: 📊 Check results
      run: |
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "🐳 Docker: ${{ needs.docker.result }}"
        echo "⚙️  Setup: ${{ needs.setup-validation.result }}"
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.setup-validation.result }}" == "success" ]]; then
          echo "✅ All checks passed! 🎉"
        else
          echo "❌ Some checks failed"
          exit 1
        fi
