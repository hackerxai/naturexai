#!/bin/bash

# üê≥ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Docker
# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker Compose

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}============================================${NC}"
    echo -e "${BLUE}üê≥ $1${NC}"
    echo -e "${BLUE}============================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    print_header "–ü–†–û–í–ï–†–ö–ê DOCKER"
    
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker daemon"
        exit 1
    fi
    
    print_success "Docker –∏ Docker Compose –≥–æ—Ç–æ–≤—ã"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ .env —Ñ–∞–π–ª–∞
prepare_env() {
    print_header "–ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò"
    
    if [ ! -f ".env" ]; then
        if [ -f "env_example.txt" ]; then
            cp env_example.txt .env
            print_warning ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
            print_warning "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
        else
            print_error "env_example.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
    else
        print_success ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    source .env
    if [ -z "$BOT_TOKEN" ] || [ "$BOT_TOKEN" = "your_bot_token_here" ]; then
        print_error "BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
        exit 1
    fi
    
    if [ -z "$OPENROUTER_API_KEY" ] || [ "$OPENROUTER_API_KEY" = "your_openrouter_api_key_here" ]; then
        print_error "OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
        exit 1
    fi
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_dirs() {
    print_header "–°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô"
    
    mkdir -p logs
    mkdir -p data
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
build_and_run() {
    print_header "–°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ô–ù–ï–†–ê"
    
    echo "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
    docker-compose build
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker-compose up -d
    
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_header "–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê"
    
    sleep 5  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    
    if docker-compose ps | grep -q "Up"; then
        print_success "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    else
        print_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
show_management_commands() {
    print_header "–ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø"
    
    echo -e "${BLUE}üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  docker-compose up -d          # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ"
    echo "  docker-compose down           # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "  docker-compose restart        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  docker-compose logs -f        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  docker-compose ps             # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo ""
    
    echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:${NC}"
    echo "  git pull                      # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo "  docker-compose down           # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    echo "  docker-compose build          # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å"
    echo "  docker-compose up -d          # –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    echo ""
    
    echo -e "${BLUE}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
    echo "  docker-compose logs           # –í—Å–µ –ª–æ–≥–∏"
    echo "  docker stats                  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "  docker system df              # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"
    echo ""
}

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
show_final_instructions() {
    print_header "–†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
    
    echo -e "${GREEN}üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç —á–µ—Ä–µ–∑ Docker!${NC}\n"
    
    echo -e "${BLUE}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞:${NC}"
    echo "‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo "‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f"
    echo ""
    
    echo -e "${BLUE}üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${NC}"
    echo "‚Ä¢ –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ./logs/"
    echo "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env —Ñ–∞–π–ª–µ"
    echo ""
    
    print_success "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñüå±"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header "–†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ß–ï–†–ï–ó DOCKER"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    check_docker
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    prepare_env
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_dirs
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    build_and_run
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    check_status
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    show_management_commands
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_final_instructions
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "stop")
        print_header "–û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê"
        docker-compose down
        print_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    "restart")
        print_header "–ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê"
        docker-compose restart
        print_success "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    "logs")
        print_header "–ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í"
        docker-compose logs -f
        ;;
    "status")
        print_header "–°–¢–ê–¢–£–° –ë–û–¢–ê"
        docker-compose ps
        ;;
    "update")
        print_header "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–û–¢–ê"
        git pull
        docker-compose down
        docker-compose build
        docker-compose up -d
        print_success "–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    *)
        main "$@"
        ;;
esac
