import aiohttp
import asyncio
import base64
import io
from PIL import Image
import config
from telegram import InputMediaPhoto
import logging

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_request_count = {}

# –ö–µ—à —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ fallback
working_models_cache = {}

async def recognize_with_fallback(image_data, prompt, task_type="plant"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    for model_key in config.FALLBACK_MODELS:
        if model_key not in config.AVAILABLE_MODELS:
            continue
            
        model_name = config.AVAILABLE_MODELS[model_key]
        
        try:
            print(f"–ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            content_parts = [{"type": "text", "text": prompt}]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if isinstance(image_data, list):
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, image_bytes in enumerate(image_data):
                    base64_image = await encode_image_to_base64(image_bytes)
                    if base64_image:
                        content_parts.append({
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        })
                        print(f"  üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{len(image_data)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                base64_image = await encode_image_to_base64(image_data)
                if base64_image:
                    content_parts.append({
                        "type": "image_url", 
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    })
            
            if len(content_parts) == 1:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
            headers = {
                "Authorization": f"Bearer {config.OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/plant-recognition-bot",
                "X-Title": "Plant Recognition Bot - Expert Mode" if task_type == "expert" else "Plant Recognition Bot"
            }
            
            payload = {
                "model": model_name,
                "messages": [
                    {
                        "role": "user", 
                        "content": content_parts
                    }
                ],
                "max_tokens": 1500 if task_type == "expert" else 1000,
                "temperature": 0.7
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(config.OPENROUTER_BASE_URL + "/chat/completions", 
                                      headers=headers, json=payload) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        if 'choices' in result and result['choices']:
                            recognition_text = result['choices'][0]['message']['content']
                            print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å –≤ –∫–µ—à
                            working_models_cache[task_type] = model_key
                            
                            return recognition_text, None
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É {response.status}: {error_text}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model_name}: {str(e)}")
            continue
    
    return None, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏
biology_subscriptions = set()

# –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_lesson_index = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (plant/expert)
user_recognition_mode = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)
expert_mode_data = {}

async def encode_image_to_base64(image_bytes):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        image = Image.open(io.BytesIO(image_bytes))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        image.save(buffer, format='JPEG', quality=85)
        buffer.seek(0)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        encoded_string = base64.b64encode(buffer.getvalue()).decode('utf-8')
        return encoded_string
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def recognize_plant_with_qwen(image_bytes):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è OpenRouter API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    return await recognize_with_fallback(image_bytes, config.PLANT_RECOGNITION_PROMPT, "plant")

async def recognize_plant_expert_mode(image_data, additional_text=""):
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    expert_prompt = config.EXPERT_RECOGNITION_PROMPT
    
    if additional_text:
        expert_prompt += f"\n\nüó®Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{additional_text}\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞–Ω–∞–ª–∏–∑–µ!"
    
    if isinstance(image_data, list) and len(image_data) > 1:
        expert_prompt += f"\n\nüì∏ –ü–û–õ–£–ß–ï–ù–û {len(image_data)} –§–û–¢–û–ì–†–ê–§–ò–ô: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."
    
    return await recognize_with_fallback(image_data, expert_prompt, "expert")

def get_random_message(messages_list):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    import random
    return random.choice(messages_list)

def format_plant_response(plant_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not plant_info:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ! üì∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
    formatted_response = f"üåø **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:**\n\n{plant_info}\n\nüíö *–ù–∞–¥–µ—é—Å—å, —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!*"
    
    return formatted_response

def format_expert_response(expert_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    if not expert_info:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å
    expert_footer = """\n\nüî¨ **–≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞—É—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑  
‚Ä¢ –£—á—Ç–µ–Ω—ã —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã

üìö **–î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:**
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏ —Ñ–ª–æ—Ä—ã –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –±–æ—Ç–∞–Ω–∏–∫–∞–º–∏
‚Ä¢ –ü–æ–ª–µ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏-—Å–∏—Å—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏

üß¨ *–ù–∞—É–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã!*"""
    
    formatted_response = f"üß¨ **–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:**\n\n{expert_info}{expert_footer}"
    
    return formatted_response

def get_admin_contact_link(message_type="support"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    
    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
    messages = {
        "support": "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π üå±\n\n–•–æ—á—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:\n\n[–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å]",
        "feedback": "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π üå±\n\n–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n\n[–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å]",
        "order_bot": "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π üå±\n\n–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.\n\n–ú–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n[–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–¥–µ—Å—å]",
        "support_project": "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π üå±\n\n–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n[–û–ø–∏—à–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å]"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    message_text = messages.get(message_type, messages["support"])
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω—É (tg:// –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    admin_link = f"tg://user?id={config.ADMIN_ID}"
    
    return admin_link, message_text

def get_admin_username_link():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞ –ø–æ username (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
    # –ï—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –µ—Å—Ç—å username, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
    admin_username = getattr(config, 'ADMIN_USERNAME', None)
    if admin_username:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        username = admin_username.lstrip('@')
        return f"https://t.me/{username}"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –ø–æ ID (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
        return f"tg://user?id={config.ADMIN_ID}"

def get_admin_link_with_text(message_type="support"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_link, message_text = get_admin_contact_link(message_type)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é —Å—Å—ã–ª–∫—É
    if config.ADMIN_USERNAME:
        username = config.ADMIN_USERNAME.lstrip('@')
        return f"https://t.me/{username}", message_text
    else:
        return admin_link, message_text

def increment_user_requests(user_id):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    global user_request_count
    user_request_count[user_id] = user_request_count.get(user_id, 0) + 1
    return user_request_count[user_id]

async def check_and_send_promo(update, context, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ 3-–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    request_count = increment_user_requests(user_id)
    
    if request_count == 3:
        try:
            # –ü—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã)
            promo_text = """üî• **–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!** üî•

–ù–∞–¥–µ—é—Å—å, –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è! üå±

üåü **–ß—Ç–æ –µ—â–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –±–æ–ª—å—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –±–∏–æ–ª–æ–≥–∏–∏
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏

üíö –ï—Å–ª–∏ –±–æ—Ç –ø–æ–ª–µ–∑–µ–Ω - –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π! üåø‚ú®"""

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É cv.jpg
            with open('cv.jpg', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=promo_text,
                    parse_mode='Markdown'
                )
            
            print(f"–ü—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            try:
                await update.message.reply_text(
                    promo_text,
                    parse_mode='Markdown'
                )
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e2}")

def subscribe_to_biology_lessons(user_id):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –±–∏–æ–ª–æ–≥–∏–∏"""
    global biology_subscriptions
    biology_subscriptions.add(user_id)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_lesson_index:
        user_lesson_index[user_id] = 0
    return True

def unsubscribe_from_biology_lessons(user_id):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –±–∏–æ–ª–æ–≥–∏–∏"""
    global biology_subscriptions
    biology_subscriptions.discard(user_id)
    return True

def is_subscribed_to_biology_lessons(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É—Ä–æ–∫–∏ –±–∏–æ–ª–æ–≥–∏–∏"""
    return user_id in biology_subscriptions

def get_subscribed_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return list(biology_subscriptions)

def get_next_lesson_for_user(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_lesson_index:
        user_lesson_index[user_id] = 0
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from config import BIOLOGY_LESSONS
    
    current_index = user_lesson_index[user_id]
    lesson = BIOLOGY_LESSONS[current_index % len(BIOLOGY_LESSONS)]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
    user_lesson_index[user_id] = (current_index + 1) % len(BIOLOGY_LESSONS)
    
    return lesson

def format_biology_lesson(lesson):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    formatted_lesson = f"""üß¨ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏**

üìö **{lesson['title']}**

{lesson['content']}

üí° **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**
{lesson['fact']}

üî¨ **–ü–æ–¥—É–º–∞–π –Ω–∞–¥ —ç—Ç–∏–º:**
{lesson['question']}

---
üíö *–ù–∞–¥–µ—é—Å—å, —É—Ä–æ–∫ –±—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º! –ó–∞–≤—Ç—Ä–∞ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–æ–≤–∞—è —Ç–µ–º–∞!*

üîï –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É—Ä–æ–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lessons"""
    
    return formatted_lesson

def set_user_recognition_mode(user_id, mode):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (plant/expert)"""
    global user_recognition_mode
    user_recognition_mode[user_id] = mode
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == "expert":
        expert_mode_data[user_id] = {
            'photos': [],
            'additional_text': '',
            'waiting_for_text': False,
            'waiting_for_photos': True
        }

def add_expert_photo(user_id, photo_bytes):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º"""
    if user_id not in expert_mode_data:
        expert_mode_data[user_id] = {
            'photos': [],
            'additional_text': '',
            'waiting_for_text': False,
            'waiting_for_photos': True
        }
    
    expert_mode_data[user_id]['photos'].append(photo_bytes)
    return len(expert_mode_data[user_id]['photos'])

def set_expert_additional_text(user_id, text):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if user_id in expert_mode_data:
        expert_mode_data[user_id]['additional_text'] = text

def get_expert_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    return expert_mode_data.get(user_id, None)

def clear_expert_data(user_id):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if user_id in expert_mode_data:
        del expert_mode_data[user_id]

def set_expert_waiting_state(user_id, waiting_for_text=False, waiting_for_photos=False):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    if user_id in expert_mode_data:
        expert_mode_data[user_id]['waiting_for_text'] = waiting_for_text
        expert_mode_data[user_id]['waiting_for_photos'] = waiting_for_photos

def get_user_recognition_mode(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_recognition_mode.get(user_id, "plant")

def clear_user_recognition_mode(user_id):
    """–û—á–∏—â–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_recognition_mode
    user_recognition_mode.pop(user_id, None)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def duplicate_request_to_admin(context, user, request_type, content=None, photo_data=None):
    """–î—É–±–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ ('photo', 'text', 'callback')
        content: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ callback)
        photo_data: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (–¥–ª—è —Ñ–æ—Ç–æ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not config.DUPLICATE_REQUESTS:
        return
        
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = f"üìã **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞**\n\n"
        admin_message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name}"
        if user.username:
            admin_message += f" (@{user.username})"
        admin_message += f"\nüÜî **ID:** {user.id}\n"
        admin_message += f"üìù **–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {request_type}\n"
        
        if request_type == 'photo':
            admin_message += f"üì∏ **–§–æ—Ç–æ:** –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"
            if photo_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await context.bot.send_photo(
                    chat_id=config.ADMIN_ID,
                    photo=photo_data,
                    caption=admin_message,
                    parse_mode='Markdown'
                )
            else:
                await context.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=admin_message,
                    parse_mode='Markdown'
                )
        
        elif request_type == 'text':
            admin_message += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** {content}"
            await context.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
        
        elif request_type == 'callback':
            admin_message += f"üîò **Callback:** {content}"
            await context.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def duplicate_photo_request(context, user, photo_data):
    """–î—É–±–ª–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await duplicate_request_to_admin(context, user, 'photo', photo_data=photo_data)

async def duplicate_text_request(context, user, text):
    """–î—É–±–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await duplicate_request_to_admin(context, user, 'text', content=text)

async def duplicate_callback_request(context, user, callback_data):
    """–î—É–±–ª–∏—Ä—É–µ—Ç callback –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await duplicate_request_to_admin(context, user, 'callback', content=callback_data)
