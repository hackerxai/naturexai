#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        print("‚úÖ config.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(config, 'EMOJIS'):
            print(f"‚úÖ –≠–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {len(config.EMOJIS)} —à—Ç.")
        
        if hasattr(config, 'WELCOME_MESSAGES'):
            print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(config.WELCOME_MESSAGES)} —à—Ç.")
        
        if hasattr(config, 'PHOTO_MESSAGES'):
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–æ—Ç–æ: {len(config.PHOTO_MESSAGES)} —à—Ç.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ config.py: {e}")
        return False

async def test_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    
    try:
        import utils
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from config import WELCOME_MESSAGES
        random_msg = utils.get_random_message(WELCOME_MESSAGES)
        print(f"‚úÖ get_random_message —Ä–∞–±–æ—Ç–∞–µ—Ç: {random_msg[:50]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        test_response = utils.format_plant_response("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        print(f"‚úÖ format_plant_response —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_response[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ utils.py: {e}")
        return False

async def test_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        import keyboards
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        main_kb = keyboards.get_main_keyboard()
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        help_kb = keyboards.get_help_keyboard()
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏ —Å–æ–∑–¥–∞–Ω–∞")
        
        about_kb = keyboards.get_about_keyboard()
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ keyboards.py: {e}")
        return False

async def test_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã (–±–µ–∑ Telegram API)"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤...")
    
    try:
        import handlers
        print("‚úÖ handlers.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if hasattr(handlers, 'start_command'):
            print("‚úÖ start_command –Ω–∞–π–¥–µ–Ω")
        
        if hasattr(handlers, 'handle_photo'):
            print("‚úÖ handle_photo –Ω–∞–π–¥–µ–Ω")
        
        if hasattr(handlers, 'handle_text'):
            print("‚úÖ handle_text –Ω–∞–π–¥–µ–Ω")
        
        if hasattr(handlers, 'handle_callback'):
            print("‚úÖ handle_callback –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handlers.py: {e}")
        return False

async def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        import config
        import handlers
        import keyboards
        import utils
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üå± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_config,
        test_utils,
        test_keyboards,
        test_handlers
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python check_setup.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
